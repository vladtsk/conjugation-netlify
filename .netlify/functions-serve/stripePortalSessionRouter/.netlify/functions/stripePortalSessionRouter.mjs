
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// .netlify/functions/stripePortalSessionRouter.js
import dotenv from "dotenv";
import express, { Router } from "express";
import Stripe from "stripe";
dotenv.config();
var portalSessionRouter = Router();
var stripe = new Stripe(process.env.STRIPE_PRIVATE_KEY);
portalSessionRouter.post("/create-portal-session", async (req, res) => {
  const { stripeCustomerID } = req.body;
  const returnUrl = process.env.CLIENT_URL;
  if (stripeCustomerID) {
    try {
      const portalSession = await stripe.billingPortal.sessions.create({
        customer: stripeCustomerID,
        return_url: returnUrl
      });
      res.redirect(303, portalSession.url);
    } catch (error) {
      console.error("Error creating Stripe billing portal session:", error);
      res.redirect(500, `${returnUrl}/error.html`);
    }
  } else {
    res.redirect(303, `${returnUrl}/error.html`);
  }
});
var stripePortalSessionRouter_default = portalSessionRouter;
export {
  stripePortalSessionRouter_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLm5ldGxpZnkvZnVuY3Rpb25zL3N0cmlwZVBvcnRhbFNlc3Npb25Sb3V0ZXIuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcclxuaW1wb3J0IGV4cHJlc3MsIHsgUm91dGVyIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuXHJcbmltcG9ydCBTdHJpcGUgZnJvbSBcInN0cmlwZVwiO1xyXG5cclxuXHJcbmRvdGVudi5jb25maWcoKTtcclxuXHJcbmNvbnN0IHBvcnRhbFNlc3Npb25Sb3V0ZXIgPSBSb3V0ZXIoKTtcclxuXHJcbmNvbnN0IHN0cmlwZSA9IG5ldyBTdHJpcGUocHJvY2Vzcy5lbnYuU1RSSVBFX1BSSVZBVEVfS0VZKTtcclxuXHJcbnBvcnRhbFNlc3Npb25Sb3V0ZXIucG9zdChcIi9jcmVhdGUtcG9ydGFsLXNlc3Npb25cIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgIFxyXG4gICAgLy9odHRwczovL2RvY3Muc3RyaXBlLmNvbS9jdXN0b21lci1tYW5hZ2VtZW50L2ludGVncmF0ZS1jdXN0b21lci1wb3J0YWxcclxuICAgIGNvbnN0IHsgc3RyaXBlQ3VzdG9tZXJJRCB9ID0gcmVxLmJvZHk7XHJcblxyXG4gIFxyXG4gICAgLy8gVGhpcyBpcyB0aGUgdXJsIHRvIHdoaWNoIHRoZSBjdXN0b21lciB3aWxsIGJlIHJlZGlyZWN0ZWQgd2hlbiB0aGV5IGFyZSBkb25lIG1hbmFnaW5nIHRoZWlyIGJpbGxpbmcgd2l0aCB0aGUgcG9ydGFsLlxyXG4gICAgY29uc3QgcmV0dXJuVXJsID0gcHJvY2Vzcy5lbnYuQ0xJRU5UX1VSTDtcclxuICBcclxuICAgIGlmKHN0cmlwZUN1c3RvbWVySUQpIHtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcG9ydGFsU2Vzc2lvbiA9IGF3YWl0IHN0cmlwZS5iaWxsaW5nUG9ydGFsLnNlc3Npb25zLmNyZWF0ZSh7XHJcbiAgICAgICAgICBjdXN0b21lcjogc3RyaXBlQ3VzdG9tZXJJRCxcclxuICAgICAgICAgIHJldHVybl91cmw6IHJldHVyblVybCxcclxuICAgICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICAgcmVzLnJlZGlyZWN0KDMwMywgcG9ydGFsU2Vzc2lvbi51cmwpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgU3RyaXBlIGJpbGxpbmcgcG9ydGFsIHNlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICAgICAgLy8gUmVkaXJlY3QgdG8gYW4gZXJyb3IgcGFnZSBvciByZXR1cm4gYW4gZXJyb3IgcmVzcG9uc2VcclxuICAgICAgICAgIHJlcy5yZWRpcmVjdCg1MDAsIGAke3JldHVyblVybH0vZXJyb3IuaHRtbGApO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSBlbHNlIHsgXHJcbiAgICAgIC8vIFJlZGlyZWN0IHRvIGFuIGVycm9yIHBhZ2UgaWYgc3RyaXBlQ3VzdG9tZXJJRCBpcyBub3QgcHJvdmlkZWRcclxuICAgICAgcmVzLnJlZGlyZWN0KDMwMywgYCR7cmV0dXJuVXJsfS9lcnJvci5odG1sYCk7IFxyXG4gICAgfVxyXG4gICAgXHJcbiAgfSk7XHJcblxyXG4gIGV4cG9ydCBkZWZhdWx0IHBvcnRhbFNlc3Npb25Sb3V0ZXI7Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7OztBQUFBLE9BQU8sWUFBWTtBQUNuQixPQUFPLFdBQVcsY0FBYztBQUVoQyxPQUFPLFlBQVk7QUFHbkIsT0FBTyxPQUFPO0FBRWQsSUFBTSxzQkFBc0IsT0FBTztBQUVuQyxJQUFNLFNBQVMsSUFBSSxPQUFPLFFBQVEsSUFBSSxrQkFBa0I7QUFFeEQsb0JBQW9CLEtBQUssMEJBQTBCLE9BQU8sS0FBSyxRQUFRO0FBR25FLFFBQU0sRUFBRSxpQkFBaUIsSUFBSSxJQUFJO0FBSWpDLFFBQU0sWUFBWSxRQUFRLElBQUk7QUFFOUIsTUFBRyxrQkFBa0I7QUFFbkIsUUFBSTtBQUNGLFlBQU0sZ0JBQWdCLE1BQU0sT0FBTyxjQUFjLFNBQVMsT0FBTztBQUFBLFFBQy9ELFVBQVU7QUFBQSxRQUNWLFlBQVk7QUFBQSxNQUNkLENBQUM7QUFFRCxVQUFJLFNBQVMsS0FBSyxjQUFjLEdBQUc7QUFBQSxJQUNyQyxTQUFTLE9BQU87QUFDWixjQUFRLE1BQU0saURBQWlELEtBQUs7QUFFcEUsVUFBSSxTQUFTLEtBQUssR0FBRyxTQUFTLGFBQWE7QUFBQSxJQUMvQztBQUFBLEVBRUYsT0FBTztBQUVMLFFBQUksU0FBUyxLQUFLLEdBQUcsU0FBUyxhQUFhO0FBQUEsRUFDN0M7QUFFRixDQUFDO0FBRUQsSUFBTyxvQ0FBUTsiLAogICJuYW1lcyI6IFtdCn0K
